from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.database import conn, cursor
from handlers.start import start
from telegram.error import BadRequest
from keyboards import admin_back
from io import BytesIO
from handlers.captcha import *
import json
from pathlib import Path
from handlers.text import actions
from utils import *

config_path = Path(__file__).parent.parent / 'config.json'

with open(config_path, 'r', encoding='utf-8') as f:
    config = json.load(f)
    
ADMIN_IDS = config["ADMIN_IDS"]
OWNER = config["OWNER"]
TELEGRAM_CHANEL = config["TELEGRAM_CHANEL"]

async def buttonInlineHandler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    data = query.data

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'state_stack' not in context.user_data:
        context.user_data['state_stack'] = []

    try:
        await query.answer()
    except BadRequest as e:
        if "Query is too old" in str(e):
            print(f"–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª {e}")
            return
        raise e
    
    await query.answer()
    username = query.from_user.username or ""
    
    from keyboards import back_button
    
    if data.startswith("change_captcha"):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–ø—á–∏
        new_captcha_text = generateCaptchaText()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–∞–ø—á–∏ –≤ user_data
        context.user_data['captchaText'] = new_captcha_text

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏
        new_captcha_image = await createCaptchaImage(new_captcha_text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ
        new_captcha_image.seek(0)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ç–æ–∫ –≤ –Ω–∞—á–∞–ª–µ
        new_captcha_file = BytesIO(new_captcha_image.read())
        new_captcha_file.name = 'captcha.png'

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputMediaPhoto —Å caption
        media = InputMediaPhoto(new_captcha_file, caption="–ü—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ø—á–∏
        await query.edit_message_media(
            media=media, 
            reply_markup=getChangeCaptchaButton()
        )

    # === Check partner subscription
    elif data.startswith("check_partner_"):
        partner_channel = data.split("check_partner_")[1]
        try:
            chat_member = await context.bot.get_chat_member(partner_channel, uid)
            if chat_member.status in ["member", "administrator", "creator"]:
                await query.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
                await start(update, context)
            else:
                await query.edit_message_text(
                    f"‚ùó –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {partner_channel}.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_partner_{partner_channel}")
                    ]])
                )
        except:
            await query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {partner_channel}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω, –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω."
            )
        return



    # === check_subscription main channel
    if data == 'check_subscription':
        all_subscribed = True  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        for channel in TELEGRAM_CHANEL:
            try:
                chat_member = await context.bot.get_chat_member(channel, uid)
                if chat_member.status not in ['member', 'administrator', 'creator']:
                    all_subscribed = False
                    break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel}: {e}")
                all_subscribed = False
                break

        if all_subscribed:
            cursor.execute("UPDATE users SET subscription_verified = TRUE WHERE id=?", (uid,))
            conn.commit()
            await query.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
            await start(update, context)
        else:
            await query.edit_message_text(
                f"‚ùó –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã: {', '.join(TELEGRAM_CHANEL)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
                ]])
            )
        return

    if data == 'earn':
        cursor.execute("SELECT referral_link FROM users WHERE id=?", (uid,))
        link = cursor.fetchone()[0]
        await query.edit_message_text(f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link}", reply_markup=back_button())

    elif data == 'buy':
        await query.edit_message_text("üì¢ –°–≤—è–∂–∏—Ç–µ—Å—å: @FRRaskTC", reply_markup=back_button())

    elif data == 'withdraw':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
        cursor.execute("SELECT COUNT(*) FROM withdraw_requests WHERE user_id=? AND status='pending'", (uid,))
        active_request = cursor.fetchone()[0]

        if active_request > 0:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–±—Ä–∞–±–æ—Ç–∫–∏.", reply_markup=back_button())
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        cursor.execute("SELECT minimum_output FROM settings WHERE id=1")
        minimum_output = cursor.fetchone()[0]
        
        cursor.execute("SELECT stars FROM users WHERE id=?", (uid,))
        stars = cursor.fetchone()[0]
        if stars < minimum_output:
            await query.edit_message_text(f"‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ú–∏–Ω–∏–º—É–º: {minimum_output} ‚≠ê.", reply_markup=back_button())
        else:
            actions[uid] = 'withdraw_request'
            await query.edit_message_text(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ (–æ—Ç {minimum_output} –¥–æ {stars} ‚≠ê):",
                reply_markup=back_button()
            )

    # === partners
    elif data == 'partners':
        cursor.execute("SELECT info, contact FROM partners")
        rows = cursor.fetchall()
        if not rows:
            await query.edit_message_text("–ù–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞", callback_data="partner_add")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
            ]))
        else:
            text = "\n".join([f"üîπ {info} ‚Äî {contact}" for info, contact in rows])
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞", callback_data="partner_add")],
                    [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞", callback_data="partner_remove")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
                ])
            )


    elif data == 'mystats':
        cursor.execute("SELECT stars, withdrawn, referral_link FROM users WHERE id=?", (uid,))
        stars, withdrawn, link = cursor.fetchone()
        cursor.execute("SELECT COUNT(*) FROM users WHERE invited_by=?", (uid,))
        invited = cursor.fetchone()[0]
        achievements = []
        
        if invited >= 5:
            achievements.append("üîì –†–µ–∫—Ä—É—Ç—ë—Ä")
            
        if stars + withdrawn >= 200:
            achievements.append("üíé –ú–∞—Å—Ç–µ—Ä")
            
        cursor.execute("SELECT captcha_verified FROM users WHERE id=?", (uid,))
        if cursor.fetchone()[0]:
            achievements.append("üß† –ì–µ–Ω–∏–π")
        achievement_text = "\nüèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements) if achievements else ""
        await query.message.reply_text(
            f"üë§ @{query.from_user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
            f"‚≠ê –ë–∞–ª–∞–Ω—Å: {stars}\n"
            f"üí∏ –í—ã–≤–µ–¥–µ–Ω–æ: {withdrawn}\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {invited}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
            f"{achievement_text}",
            reply_markup=admin_back())

    elif data == 'ask':
        actions['ask'].add(uid)
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=back_button())

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ===
    elif data.startswith("confirm_withdraw_") or data.startswith("reject_withdraw_"):
        target_uid = int(data.split("_")[2])
        action = "confirm" if data.startswith("confirm_withdraw_") else "reject"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞—è–≤–∫–∞
        cursor.execute("SELECT stars FROM withdraw_requests WHERE user_id=? AND status='pending'", (target_uid,))
        request = cursor.fetchone()
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        stars = request[0]
        admin_username = query.from_user.username or query.from_user.id

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        new_status = "approved" if action == "confirm" else "rejected"
        cursor.execute("UPDATE withdraw_requests SET status=? WHERE user_id=?", (new_status, target_uid))
        conn.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        if action == "confirm":
            cursor.execute("UPDATE users SET stars=stars-?, withdrawn=withdrawn+? WHERE id=?", (stars, stars, target_uid))
            conn.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        status_text = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ" if action == "confirm" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        notification_text = (
            f"ü§ë <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{target_uid}\n"
            f"üí∏ –°—É–º–º–∞: {stars} ‚≠ê\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            f"üëÆ‚Äç‚ôÇÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–ª: @{admin_username}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_messages = context.bot_data.get(f"withdraw_request_{target_uid}", {})
        for admin_id, message_id in admin_messages.items():
            try:
                await context.bot.edit_message_text(
                    chat_id=admin_id,
                    message_id=message_id,
                    text=notification_text,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_notification = (
            f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {stars} ‚≠ê –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω!" if action == "confirm"
            else f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {stars} ‚≠ê –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."
        )
        try:
            await context.bot.send_message(target_uid, user_notification)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_uid}: {e}")

    # === Back button
    elif data == 'back':
        from keyboards import getInlineKeyboardBut
        from messages import infoMessage

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            cursor.execute("SELECT referral_link FROM users WHERE id=?", (uid,))
            link = cursor.fetchone()
            if not link:
                raise ValueError("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            cursor.execute("SELECT COUNT(*) FROM referrals WHERE inviter_id=?", (uid,))
            referalsCount = cursor.fetchone()[0]

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            cursor.execute("SELECT referral_price_inviter FROM settings")
            referral_price_inviter = cursor.fetchone()[0]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = infoMessage(referral_price_inviter, referalsCount, link[0])
            await query.edit_message_text(
                message_text,
                parse_mode='HTML',
                reply_markup=getInlineKeyboardBut(uid)
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {e}")
        finally:
            if uid in actions:
                actions.pop(uid, None)

    elif data == 'admin_back':
        from keyboards import getAdminPanelKeyboard
        try:
            await query.edit_message_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=getAdminPanelKeyboard(uid, OWNER))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        finally:
            if uid in actions:
                actions.pop(uid, None)
                
    # === Add partner (only admin)
    elif data == 'partner_add':
        if uid not in ADMIN_IDS:
            await query.edit_message_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
                reply_markup = admin_back()
            )
            return
        actions[uid] = 'partner_add'
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —á–µ—Ä–µ–∑ ‚Äî",
            reply_markup = admin_back()
        )

    # === Remove partner (only admin)
    elif data == 'partner_remove':
        if uid not in ADMIN_IDS:
            await query.edit_message_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
                reply_markup = admin_back()
            )
            return
        actions[uid] = 'partner_remove'
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—Å—ã–ª–∫—É –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup = admin_back()
        )

    # === Admin broadcast (only admin)
    elif data == 'admin_broadcast':
        if uid not in ADMIN_IDS:
            await query.edit_message_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
                reply_markup = admin_back()
            )
            return
        actions[uid] = 'broadcast'
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup = admin_back()
    )

    # === Admin stats (only admin)
    elif data == 'admin_stats':
        if uid not in ADMIN_IDS:
            await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0] or 0

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –±–æ–ª—å—à–µ 5 –ª—é–¥–µ–π)
            cursor.execute("""
                SELECT COUNT(*)
                FROM users
                WHERE id IN (
                    SELECT inviter_id
                    FROM referrals
                    GROUP BY inviter_id
                    HAVING COUNT(referred_id) > 5
                )
            """)
            active_users = cursor.fetchone()[0] or 0

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
            cursor.execute("SELECT COUNT(*) FROM withdraw_requests WHERE status = 'approved'")
            approved_withdraws = cursor.fetchone()[0] or 0

            # –°—É–º–º–∞ –≤—Å–µ—Ö –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–≤—ë–∑–¥
            cursor.execute("""
                SELECT COALESCE(SUM(stars), 0) 
                FROM withdraw_requests 
                WHERE status = 'approved'
            """)
            total_withdrawn_stars = cursor.fetchone()[0] or 0

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            stats_message = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n\n"
                f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
                f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {active_users}\n"
                f"üí∏ <b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ (–æ–¥–æ–±—Ä–µ–Ω–æ):</b> {approved_withdraws}\n"
                f"‚≠ê <b>–í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ –∑–≤—ë–∑–¥:</b> {total_withdrawn_stars}\n"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                stats_message,
                parse_mode="HTML",
                reply_markup = admin_back()
            )

        except BadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # === Admin set referral price (only admin)
    elif data == 'admin_set_price_inviter':
        if uid not in ADMIN_IDS:
            await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        actions[uid] = 'set_price_inviter'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª (—á–∏—Å–ª–æ).",
                reply_markup = admin_back())
        
    elif data == 'admin_set_price_referred':
        if uid not in ADMIN_IDS:
            await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        actions[uid] = 'set_price_referred'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —á–µ–ª–æ–≤–µ–∫—É –∑–∞—à–µ–¥—à–µ–º—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (—á–∏—Å–ª–æ).",
                reply_markup = admin_back())
        
    # === Add admin (only owner)
    elif data == 'admin_add':
        if uid != OWNER:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            await query.edit_message_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
                reply_markup=admin_back()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ actions
        actions[uid] = 'admin_add'

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ç–µ–≥–∞ –∏–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @) –∏–ª–∏ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=admin_back()
        )
        
    # === Set minimum output (only owner)
    elif data == 'admin_set_minimum_output':
        if uid != OWNER:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            await query.edit_message_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
                reply_markup=admin_back()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ actions
        actions[uid] = 'set_minimum_output'

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ç–µ–≥–∞ –∏–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤—ã–≤–æ–¥–∞ (—á–∏—Å–ª–æ):",
            reply_markup=admin_back()
        )
        
    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ===
    elif data.startswith("admin_withdraws"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ data –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if "_" in data and data.split("_")[-1].isdigit():
            page = int(data.split("_")[-1])
        else:
            page = 1  # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

        items_per_page = 5
        offset = (page - 1) * items_per_page

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if uid not in ADMIN_IDS:
            await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        cursor.execute(f"""
            SELECT 
                wr.user_id, 
                wr.stars, 
                u.username, 
                u.stars AS balance, 
                (SELECT COUNT(*) FROM referrals WHERE inviter_id = u.id) AS referrals
            FROM withdraw_requests wr
            JOIN users u ON wr.user_id = u.id
            WHERE wr.status = 'pending'
            LIMIT {items_per_page} OFFSET {offset}
        """)
        requests = cursor.fetchall()

        # –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not requests:
            await query.edit_message_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.", reply_markup=admin_back())
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–∞—Ö
        requests_text = "\n".join([
            f"{i + 1 + offset}. @{username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: {user_id})\n"
            f"   üí∏ –ó–∞–ø—Ä–æ—Å: {stars} ‚≠ê\n"
            f"   ‚≠ê –ë–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n"
            f"   üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}"
            for i, (user_id, stars, username, balance, referrals) in enumerate(requests)
        ])

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
        keyboard = [
            [
                InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_withdraw_{user_id}"),
                InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw_{user_id}")
            ]
            for user_id, _, _, _, _ in requests
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        cursor.execute("SELECT COUNT(*) FROM withdraw_requests WHERE status = 'pending'")
        total_requests = cursor.fetchone()[0]
        total_pages = (total_requests + items_per_page - 1) // items_per_page

        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_withdraws_{page - 1}"))
        if page < total_pages:
            pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"admin_withdraws_{page + 1}"))

        if pagination_buttons:
            keyboard.append(pagination_buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await query.edit_message_text(
            f"üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n{requests_text}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )