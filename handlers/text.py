from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from database.database import conn, cursor
import json
from pathlib import Path
from keyboards import back_button, getAdminPanelKeyboard
import random


config_path = Path(__file__).parent.parent / 'config.json'

with open(config_path, 'r', encoding='utf-8') as f:
    config = json.load(f)

ADMIN_IDS = config["ADMIN_IDS"]
OWNER = config["OWNER"]
actions = {
    'ask': set()
}
questions = {}

async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_to_message = update.message.reply_to_message
    if not reply_to_message:
        return

    for question_id, question_data in questions.items():
        if reply_to_message.message_id in question_data["message_ids"]:
            user_id = question_data["user_id"]
            admin_username = update.effective_user.username or update.effective_user.id
            answer_text = update.message.text

            await context.bot.send_message(
                user_id,
                f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{answer_text}"
            )

            for admin_message_id in question_data["message_ids"]:
                try:
                    await context.bot.edit_message_text(
                        chat_id=reply_to_message.chat_id,
                        message_id=admin_message_id,
                        text=f"‚ùì –í–æ–ø—Ä–æ—Å #{question_id} –æ—Ç @{user_id}:\n{question_data['text']}\n\n‚úÖ –û—Ç–≤–µ—Ç–∏–ª: @{admin_username}\n\n–û—Ç–≤–µ—Ç: {answer_text}"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            del questions[question_id]
            return

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text
    
    def admin_back():
        return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]])
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if uid in actions.get('ask', set()):  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–ª—é—á—É 'ask'
        question_id = random.randint(100000, 999999)
        questions[question_id] = {
            "user_id": uid,
            "message_ids": [],
            "text": text
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            msg = await context.bot.send_message(
                admin_id,
                f"‚ùì –í–æ–ø—Ä–æ—Å #{question_id} –æ—Ç @{update.effective_user.username or uid}:\n{text}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                reply_markup=back_button()
            )
            questions[question_id]["message_ids"].append(msg.message_id)

        await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.", reply_markup=back_button())
        actions['ask'].remove(uid)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    if uid in actions:
        action = actions[uid]

        if action == 'admin_back':
            keyboard = getAdminPanelKeyboard(uid, OWNER)
            await update.message.reply_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)
    
        # === Set Price
        if action == 'set_price_inviter':
            if uid not in ADMIN_IDS:
                await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return

            elif not text.isdigit():
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=admin_back())
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            new_price = int(text)
            cursor.execute("UPDATE settings SET referral_price_inviter=? WHERE id=1", (new_price,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_price}.", reply_markup=admin_back())
            print(f"–¶–µ–Ω–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_price}.")
            del actions[uid]  # –£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
        elif action == 'set_price_referred':
            if uid not in ADMIN_IDS:
                await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return

            elif not text.isdigit():
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=admin_back())
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            new_price = int(text)
            cursor.execute("UPDATE settings SET referral_price_referred=? WHERE id=1", (new_price,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –ø–µ—Ä–µ—à–µ–¥—à–µ–º—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_price}.", reply_markup=back_button())
            print(f"–¶–µ–Ω–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_price}.")
            
            del actions[uid]  # –£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            return

        # === Admin broadcast
        elif action == 'broadcast':
            if uid not in ADMIN_IDS:
                await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–∫—Å—Ç (–∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if not text or text.startswith('/'):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=admin_back())
                return

            print("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.")
            cursor.execute("SELECT id FROM users")
            users = cursor.fetchall()
            print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(users)}")
            for (user_id,) in users:
                try:
                    await context.bot.send_message(user_id, text)
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=admin_back())

            del actions[uid]  # –£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            return

        # === Add Partner
        elif action == 'partner_add':
            if uid not in ADMIN_IDS:
                await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É "–æ–ø–∏—Å–∞–Ω–∏–µ - @—Ç–µ–≥"
            if '-' not in text or not text.split('-')[1].strip().startswith('@'):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –æ–ø–∏—Å–∞–Ω–∏–µ - @—Ç–µ–≥",
                    reply_markup=admin_back()
                )
                return

            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ–≥
            description, tag = map(str.strip, text.split('-', 1))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @
            if not tag.startswith("@"):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –¢–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'.",
                    reply_markup=admin_back()
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º
            try:
                chat = await context.bot.get_chat(tag)
                if chat.type not in ["channel", "supergroup"]:
                    await update.message.reply_text(
                        "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–≥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π.",
                        reply_markup=admin_back()
                    )
                    return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–≥–∞ {tag}: {e}")
                await update.message.reply_text(
                    "‚ùå –¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.",
                    reply_markup=admin_back()
                )
                return

            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
            cursor.execute("INSERT INTO partners (info, contact) VALUES (?, ?)", (description, tag))
            conn.commit()
            await update.message.reply_text("‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_back())
            print(f"–ü–∞—Ä—Ç–Ω—ë—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {description} - {tag}")

            # –£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if uid in actions:
                actions.pop(uid, None)
                
        # === Remove Partner
        elif action == 'partner_remove':
            if uid not in ADMIN_IDS:
                await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return

            elif not text.isdigit():
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=admin_back())
                return

            contact = text.strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            cursor.execute("SELECT * FROM partners WHERE contact=?", (contact,))
            partner = cursor.fetchone()

            if partner:
                # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                cursor.execute("DELETE FROM partners WHERE contact=?", (contact,))
                conn.commit()
                await update.message.reply_text(f"‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä {contact} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=admin_back())
                print(f"–ü–∞—Ä—Ç–Ω—ë—Ä —É–¥–∞–ª—ë–Ω: {contact}")
            else:
                # –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
                await update.message.reply_text(f"‚ùå –ü–∞—Ä—Ç–Ω—ë—Ä {contact} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_back())
                print(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞: {contact}")
                
            if uid in actions:
                actions.pop(uid, None)
        
        elif action == 'admin_add':
            if uid != config["OWNER"]:
                await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return

            new_admin = text.strip()
            if new_admin.startswith('@'):  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–≥
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @ –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                new_admin_username = new_admin[1:]
                if not new_admin_username:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_back())
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º
                cursor.execute("SELECT id FROM users WHERE username=?", (new_admin_username,))
                result = cursor.fetchone()
                if result:
                    new_admin_id = result[0]
                else:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_back())
                    return
            elif new_admin.isdigit():  # –ï—Å–ª–∏ —ç—Ç–æ ID
                new_admin_id = int(new_admin)
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Ç–µ–≥ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @).", reply_markup=admin_back())
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            if new_admin_id in ADMIN_IDS:
                await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=admin_back())
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            ADMIN_IDS.append(new_admin_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º config.json, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            config["ADMIN_IDS"] = ADMIN_IDS
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=4)

            await update.message.reply_text("‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_back())
            print(f"–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {new_admin_id}")
            if uid in actions:
                actions.pop(uid, None)
        
        elif action == 'withdraw_request':

            if not text.isdigit():
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=back_button())
                return

            stars_to_withdraw = int(text)
            cursor.execute("SELECT stars FROM users WHERE id=?", (uid,))
            available_stars = cursor.fetchone()[0]

            cursor.execute("SELECT minimum_output FROM settings WHERE id=1")
            minimum_output = cursor.fetchone()[0]

            if stars_to_withdraw < minimum_output:
                await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {minimum_output} ‚≠ê.", reply_markup=back_button())
            elif stars_to_withdraw > available_stars:
                await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥. –î–æ—Å—Ç—É–ø–Ω–æ: {available_stars} ‚≠ê.", reply_markup=back_button())
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
                cursor.execute("INSERT INTO withdraw_requests (user_id, stars, status) VALUES (?, ?, 'pending')", (uid, stars_to_withdraw))
                conn.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                admin_messages = {}
                for admin in ADMIN_IDS:
                    msg = await context.bot.send_message(
                        admin,
                        f"ü§ë <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.effective_user.username or uid}\n"
                        f"üí∏ –°—É–º–º–∞: {stars_to_withdraw} ‚≠ê\n\n"
                        f"–ü—Ä–∏–Ω—è—Ç—å –∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!",
                        parse_mode="HTML"
                    )
                    admin_messages[admin] = msg.message_id

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.bot_data[f"withdraw_request_{uid}"] = admin_messages

                await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=back_button())

            if uid in actions:
                actions.pop(uid, None)
                

        elif action == 'set_minimum_output':
            if uid != config["OWNER"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
                await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á–∏—Å–ª–æ
            if not text.isdigit():
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=admin_back())
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            new_minimum_output = int(text)
            cursor.execute("UPDATE settings SET minimum_output=? WHERE id=1", (new_minimum_output,))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_minimum_output} ‚≠ê.",
                reply_markup=admin_back()
            )
            print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_minimum_output} ‚≠ê.")

            # –£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ `actions`
            if uid in actions:
                actions.pop(uid, None)
        
        return