from captcha.image import ImageCaptcha
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from io import BytesIO
import random
import string
from database.database import conn, cursor
from handlers.text import actions

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–ø—á–∏
def generateCaptchaText():
    captchaText = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    return captchaText

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ø—á–∏
async def createCaptchaImage(captchaText):
    imageCaptcha = ImageCaptcha(width=280, height=90)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
    captchaImage = imageCaptcha.generate_image(captchaText)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
    byteIo = BytesIO()
    captchaImage.save(byteIo, 'PNG')
    byteIo.seek(0)

    return byteIo

def getChangeCaptchaButton():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–ø—á—É", callback_data="change_captcha")]])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ø—á–∏
async def captchaHandler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–ø—á–∏
    cursor.execute("SELECT captcha_verified FROM users WHERE id=?", (uid,))
    if cursor.fetchone()[0]:
        # –ï—Å–ª–∏ –∫–∞–ø—á–∞ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        await update.message.reply_text("‚úÖ –ö–∞–ø—á–∞ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞!")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–∞–ø—á–∏
    captchaText = generateCaptchaText()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–ø—á–∏ –≤ user_data
    context.user_data['captchaText'] = captchaText

    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏
    captchaImage = await createCaptchaImage(captchaText)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –∫–∞–ø—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ø—á–∏
    await update.message.reply_photo(
        photo=captchaImage, 
        caption="–ü—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏.",
        reply_markup=getChangeCaptchaButton()
    )
    actions[uid] = 'captcha'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç)
async def handleCaptchaResponse(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_input = update.message.text

    if 'captchaText' not in context.user_data:
        return

    captcha_text = context.user_data['captchaText']

    if user_input.upper() == captcha_text:
        cursor.execute("UPDATE users SET captcha_verified = 1 WHERE id=?", (uid,))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º
        cursor.execute("SELECT invited_by FROM users WHERE id=?", (uid,))
        invited_by = cursor.fetchone()[0]

        # –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π
        if invited_by:
            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            cursor.execute("SELECT referral_price_inviter FROM settings WHERE id=1")
            price_inviter = cursor.fetchone()[0]
            cursor.execute("""
                UPDATE users 
                SET stars = stars + ? 
                WHERE id = ?
            """, (price_inviter, invited_by))

            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–º—É
            cursor.execute("SELECT referral_price_referred FROM settings WHERE id=1")
            price_referred = cursor.fetchone()[0]
            cursor.execute("""
                UPDATE users 
                SET stars = stars + ? 
                WHERE id = ?
            """, (price_referred, uid))

            # –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            cursor.execute("""
                INSERT INTO referrals (inviter_id, referred_id) 
                VALUES (?, ?)
            """, (invited_by, uid))

            # –û–±–Ω—É–ª—è–µ–º invited_by –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            cursor.execute("""
                UPDATE users 
                SET invited_by = NULL 
                WHERE id = ?
            """, (uid,))

            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            try:
                await context.bot.send_message(
                    invited_by,
                    f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ‚≠ê {price_inviter} –∑–≤—ë–∑–¥!"
                )
            except Exception as e:
                print(f"Error sending notification to inviter: {e}")

        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if update.callback_query:
            try:
                query = update.callback_query
                await query.edit_message_text("‚úÖ")
            except Exception as e:
                print(f"Error editing captcha message: {e}")
        else:
            await update.message.reply_text("‚úÖ")
            del actions[uid] # –£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–ø—á–∏

        from handlers.start import start
        await start(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–ø—á—É"
async def changeCaptcha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    uid = user.id
    await query.answer()