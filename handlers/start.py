from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from keyboards import getInlineKeyboardBut, getKeyboardBut
from database.database import conn, cursor
from handlers.captcha import captchaHandler
import logging
import json
from pathlib import Path
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup

config_path = Path(__file__).parent.parent / 'config.json'

with open(config_path, 'r', encoding='utf-8') as f:
    config = json.load(f)

botUserName = config["BOT_USERNAME"]
ADMIN_IDS = config["ADMIN_IDS"]
TELEGRAM_CHANEL = config["TELEGRAM_CHANEL"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    username = user.username or ""
    message_obj = update.message or (update.callback_query and update.callback_query.message)
    args = context.args if hasattr(context, 'args') else []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à—ë–Ω
    invited_by = int(args[0]) if args and args[0].isdigit() and int(args[0]) != uid else None
    cursor.execute("SELECT id FROM users WHERE id=?", (uid,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (id, username, stars, withdrawn, invited_by, referral_link) VALUES (?, ?, 0, 0, ?, '')", (uid, username, invited_by))
        link = f"https://t.me/{botUserName}?start={uid}"
        cursor.execute("UPDATE users SET referral_link=? WHERE id=?", (link, uid))
        conn.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –∫–∞–ø—á–∞
    cursor.execute("SELECT subscription_verified, captcha_verified, invited_by FROM users WHERE id=?", (uid,))
    row = cursor.fetchone()
    subscription_verified = row[0]
    captcha_verified = row[1]
    invited_by = row[2]

    if not captcha_verified:
        await captchaHandler(update, context)
        return

    not_subscribed_channels = []  # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

    for channel in TELEGRAM_CHANEL:
        if channel.startswith("@"):
            try:
                chat_member = await context.bot.get_chat_member(channel, uid)
                if chat_member.status not in ["member", "administrator", "creator"]:
                    not_subscribed_channels.append(channel)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel}: {e}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not_subscribed_channels:
        channels_list = "\n".join([f"üîπ {channel}" for channel in not_subscribed_channels])
        await message_obj.reply_text(
            f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_list}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]])
        )
        return

    # === New: Check partner channels ===
    cursor.execute("SELECT contact FROM partners")
    partner_contacts = [r[0] for r in cursor.fetchall()]

    for contact in partner_contacts:
        if contact.startswith("@"):
            try:
                chat_member = await context.bot.get_chat_member(contact, uid)
                if chat_member.status not in ["member", "administrator", "creator"]:
                    await message_obj.reply_text(
                        f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {contact}.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_partner_{contact}")
                        ]])
                    )
                    return
            except:
                pass 

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–≤–µ–∑–¥—ã, —Å–Ω—è—Ç—ã–µ –∑–≤–µ–∑–¥—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
    cursor.execute("SELECT stars, withdrawn, referral_link FROM users WHERE id=?", (uid,))
    stars, withdrawn, link = cursor.fetchone()

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT COUNT(*) FROM referrals WHERE inviter_id=?", (uid,))
    referalsCount = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    cursor.execute("SELECT referral_price_inviter FROM settings")
    referral_price_inviter = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
    cursor.execute("SELECT referral_price_referred FROM settings WHERE id=1")
    price_referred = cursor.fetchone()[0]


    from urllib.parse import quote_plus

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ (–±–µ–∑ —Å—Å—ã–ª–∫–∏)
    share_text = f"""üéâ **–ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–≤—ë–∑–¥—ã!** üéâ

–ú—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ **–±–æ–ª–µ–µ —Ç—ã—Å—è—á–∏ –∑–≤—ë–∑–¥** –∏ –¥–∞—Ä–∏–º –≤–∞–º **{price_referred} ‚≠êÔ∏è** –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—à –±–æ—Ç! üòé

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å! üöÄ

üëâ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëáüëáüëá"""

    # –ö–æ–¥–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã URL
    encoded_text = quote_plus(share_text)
    encoded_link = quote_plus(link)

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏
    share_url = f"https://t.me/share/url?text={encoded_text}&url={encoded_link}"

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    inviteButton = InlineKeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", url=share_url)

    from keyboards import getInlineKeyboardBut
    from messages import infoMessage

    await message_obj.reply_text(
        "‚ù§Ô∏è",
        reply_markup=getKeyboardBut(uid)
    )
    await message_obj.reply_text(
        infoMessage(referral_price_inviter, referalsCount, link),
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[inviteButton]])
    )