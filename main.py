from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from handlers import start
from handlers.text import text_handler, handle_admin_reply, actions
from handlers.inlineButtons import buttonInlineHandler, InlineKeyboardButton, InlineKeyboardMarkup
from handlers.keyboardButtons import buttonKeyboardHandler
from handlers.captcha import handleCaptchaResponse, changeCaptcha
from database.database import conn, cursor
from telegram import Update
from dotenv import load_dotenv
import os
import logging
import json
from pathlib import Path

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
configPath = Path(__file__).parent / 'config.json'
with open(configPath, 'r', encoding='utf-8') as f:
    config = json.load(f)

botUsername = config["BOT_USERNAME"]
adminIds = config["ADMIN_IDS"]
telegramChannel = config["TELEGRAM_CHANEL"]

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
application = ApplicationBuilder().token(os.getenv('TOKEN')).build()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def checkSubscription(uid, context, channels):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤."""
    notSubscribed = []
    for channel in channels:
        if channel.startswith("@"):
            try:
                chatMember = await context.bot.get_chat_member(channel, uid)
                if chatMember.status not in ["member", "administrator", "creator"]:
                    notSubscribed.append(channel)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel}: {e}")
                notSubscribed.append(channel)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    return notSubscribed

async def sendSubscriptionMessage(update, channels):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã."""
    channelsList = "\n".join([f"üîπ {channel}" for channel in channels])
    await update.message.reply_text(
        f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n{channelsList}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]])
    )

# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
async def combinedHandler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    if uid in actions:
        action = actions[uid]
        if action == 'captcha':
            await handleCaptchaResponse(update, context)
        else:
            await text_handler(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if update.message.reply_to_message:
        await handle_admin_reply(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    notSubscribedChannels = await checkSubscription(uid, context, telegramChannel)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
    cursor.execute("SELECT contact FROM partners")
    partnerContacts = [r[0] for r in cursor.fetchall()]
    notSubscribedChannels += await checkSubscription(uid, context, partnerContacts)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if notSubscribedChannels:
        await sendSubscriptionMessage(update, notSubscribedChannels)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É
    cursor.execute("SELECT captcha_verified FROM users WHERE id=?", (uid,))
    captchaVerified = cursor.fetchone()[0]

    if not captchaVerified:
        await handleCaptchaResponse(update, context)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await buttonKeyboardHandler(update, context)
        if text:
            await text_handler(update, context)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(buttonInlineHandler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, combinedHandler))
application.add_handler(MessageHandler(filters.TEXT, text_handler))

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()