from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from handlers import start
from handlers.text import text_handler, handle_admin_reply
from handlers.inlineButtons import buttonInlineHandler, InlineKeyboardButton, InlineKeyboardMarkup
from handlers.keyboardButtons import buttonKeyboardHandler
from handlers.captcha import handleCaptchaResponse, changeCaptcha
from database.database import conn, cursor
from telegram import Update
from dotenv import load_dotenv
import os
import logging
from handlers.text import actions, back_button
import json
from pathlib import Path

config_path = Path(__file__).parent / 'config.json'

with open(config_path, 'r', encoding='utf-8') as f:
    config = json.load(f)

botUserName = config["BOT_USERNAME"]
ADMIN_IDS = config["ADMIN_IDS"]
TELEGRAM_CHANEL = config["TELEGRAM_CHANEL"]

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

application = ApplicationBuilder().token(os.getenv('TOKEN')).build()

async def combinedHandler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    if uid in actions:
        action = actions[uid]
        if action == 'captcha':
            await handleCaptchaResponse(update, context)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ø—á—É
            return
        else:
            await text_handler(update, context)
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if update.message.reply_to_message:
        await handle_admin_reply(update, context)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        return

    not_subscribed_channels = []  # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

    for channel in TELEGRAM_CHANEL:
        if channel.startswith("@"):
            try:
                chat_member = await context.bot.get_chat_member(channel, uid)
                if chat_member.status not in ["member", "administrator", "creator"]:
                    not_subscribed_channels.append(channel)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel}: {e}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not_subscribed_channels:
            channels_list = "\n".join([f"üîπ {channel}" for channel in not_subscribed_channels])
            await update.message.reply_text(
                f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_list}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]])
            )
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É
    cursor.execute("SELECT captcha_verified FROM users WHERE id=?", (uid,))
    captcha_verified = cursor.fetchone()[0]

    if not captcha_verified:
        await handleCaptchaResponse(update, context)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await buttonKeyboardHandler(update, context)

        if text:
            await text_handler(update, context)

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(buttonInlineHandler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, combinedHandler))
application.add_handler(MessageHandler(filters.TEXT, text_handler))

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
application.run_polling()